{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Disciplina de Estrutura de dados Professor Nome: Allan (Allainclair Flausino dos Santos) Email: allainclair@gmail.com Gradua\u00e7\u00e3o: Mestre em Ci\u00eancia da computa\u00e7\u00e3o Informa\u00e7\u00f5es profissionais : LinkeIn - https://www.linkedin.com/in/allainclair/ Disciplina Site: https://allainclair.github.io/disc-estrutura-dados/ Avalia\u00e7\u00e3o (projeto) prova 1 [0-10] prova 2 [0-10] trabalho 1 [0-10] trabalho 2 [0-10] Nota final (NF) = (prova 1 + prova 2 + trabalho 1 + trabalho 2) / 4 Nota Exame (NE) M\u00e9dia final (MF) = (NF + NE) / 2 Python if NF > 6.0 : print ( 'aprovado' ) elif MF > 5.0 : print ( 'aprovado' ) else : print ( 'reprovado' )","title":"Introdu\u00e7\u00e3o"},{"location":"#disciplina-de-estrutura-de-dados","text":"","title":"Disciplina de Estrutura de dados"},{"location":"#professor","text":"Nome: Allan (Allainclair Flausino dos Santos) Email: allainclair@gmail.com Gradua\u00e7\u00e3o: Mestre em Ci\u00eancia da computa\u00e7\u00e3o Informa\u00e7\u00f5es profissionais : LinkeIn - https://www.linkedin.com/in/allainclair/","title":"Professor"},{"location":"#disciplina","text":"Site: https://allainclair.github.io/disc-estrutura-dados/","title":"Disciplina"},{"location":"#avaliacao-projeto","text":"prova 1 [0-10] prova 2 [0-10] trabalho 1 [0-10] trabalho 2 [0-10] Nota final (NF) = (prova 1 + prova 2 + trabalho 1 + trabalho 2) / 4 Nota Exame (NE) M\u00e9dia final (MF) = (NF + NE) / 2 Python if NF > 6.0 : print ( 'aprovado' ) elif MF > 5.0 : print ( 'aprovado' ) else : print ( 'reprovado' )","title":"Avalia\u00e7\u00e3o (projeto)"},{"location":"aula1/","text":"Estrutura de dados Em Ci\u00eancia da computa\u00e7\u00e3o, uma estrutura de dado \u00e9 um formato de organiza\u00e7\u00e3o, gerenciamento e armazenamento de dados que habilita acesso e modifica\u00e7\u00e3o eficiente. Exemplo e revis\u00e3o Vetor (Arranjo) Formato: Python # Em python o nome dessa estrutura de dado eh conhecida como lista # Mas para fins de exemplo criamos uma variavel com o nome vetor. # Indices do vetor comeca em 0. vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] print ( vetor [ 0 ]) 1 C /* Aqui alocamos um vetor de inteiros com 10 elementos, sendo eles todo * o intervalo [1, 10]. * Indicies comecam em 0. */ int vetor [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; printf ( \"%d\" , vetor [ 0 ]); 1 Gerenciamento: Em um vetor podemos: adicionar, atualizar, excluir e ler elementos. Adicionar Adi\u00e7\u00e3o modifica o vetor original, aumentando pelo menos um elemento novo. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . append ( 11 ) # Metodo (funcao) de orientacao a objeto. vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] # Apenas para mostrar como eh no \"paradigma estrutural\". def meu_append ( vetor , novo_elemento ): vetor . append ( novo_elemento ) # Funcao nao retorna nada, podemos chamar de \"procedimento\". vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] meu_append ( vetor , novo_elemento ) vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] Atualizar Atualiza\u00e7\u00e3o precisa modificar algum elemento j\u00e1 existente do vetor original. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor [ 2 ] = 11 vetor [ 1 , 2 , 11 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] Remover Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . remove ( 5 ) # Qual algoritmo eh necessario ANTES de remover? vetor [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 , 10 ] # TODO: exercicio: fazer o seu proprio remover. def meu_remover ( vetor , elemento ): pass # Funcao nao retorna nada Ler Python # Leitura NAO pode modificar o nosso vetor original vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] a = vetor [ 2 ] a 2 # Leitura direta do vetor para impressao print ( vetor [ 2 ]) Armazenamento: Mem\u00f3ria RAM, registradores do processador (CPU), dispositivo de armazenamento secund\u00e1rio (HDDs, SSDs, etc). Mem\u00f3ria RAM Um vetor de caracteres armazenados em mem\u00f3ria RAM. # Assumindo que cada caracter tem um byte. vetor = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] Endere\u00e7o Dado 100000 '1' 100001 '2' 100002 '3' 100003 '4' 100004 '5' 100005 '6' 100006 '7' 100007 '8' 100008 '9' 100009 '10' Revis\u00e3o Vari\u00e1veis simples Python a = 1 # Inteiro b = 2 c = True # Booleano d = 'uma string' # String e = 1.1 # Ponto flutuante (Float) print ( a ) 1 print ( b ) 2 print ( c ) True print ( d ) uma string print ( e ) 1.1 Operadores Python # Aritmeticos principais: + - * / % # Extra: ** (potencia) a = 2 b = 4 a + b 6 a ** 2 4 # Logicos principais: not and or # Comparacao: < > <= >= == != a = 2 b = 4 a > b False b > a True Estruturas de repeti\u00e7\u00e3o FOR, WHILE, DO WHILE, REPEAT UNTIL. FOR Python for ELEMENTO in ITERADOR : CORPO DO FOR Um iterador \u00e9 um \"conjunto de elementos\", podendo ser vazio, ter apenas um elemento, ou mais do que um elemento. Se for vazio, o corpo (escopo) do for n\u00e3o \u00e9 executado. Caso contr\u00e1rio o corpo do for \u00e9 executado em todos elementos do iterador. Python range ( 10 ) # Funcao pronta (interna) do Python. range ( 0 , 10 ) # Transformar o \"range\" em uma \"list\" (vetor). # Para fins de aprendizado, vetor e lista (list) sao sinonimos. list ( range ( 10 )) [ 0 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 )) [ 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 , 2 )) [ 5 , 7 , 9 ] vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] tamanho = len ( vetor ) # Funcao pronta (interna) do Python. print ( tamanho ) 10 for i in range ( tamanho ): print ( 'i: %s ' , vetor [ i ]) # Alernativa mais elegante. for elemento in vetor : print ( 'Elemento: %s ' , elemento ) # Alernativa elegante enumerada. for i , elemento in enumerate ( vetor ): print ( 'Elemento %s : %s ' , ( i , elemento )) list ( enumerate ( vetor )) [( 0 , 1 ), ( 1 , 2 ), ( 2 , 3 ), ( 3 , 4 ), ( 4 , 5 ), ( 5 , 6 ), ( 6 , 7 ), ( 7 , 8 ), ( 8 , 9 )] WHILE Python while CONDICAO : CORPO DO WHILE Enquanto a condi\u00e7\u00e3o for verdadeira o while \u00e9 executado indefinidamente; caso contr\u00e1rio o while para sua execu\u00e7\u00e3o. Python condicao = True i = 0 while condicao : print ( i ) i += 1 if i > 10 : condicao = False Exerc\u00edcio: encontrar posi\u00e7\u00e3o de um elemento em um vetor Dado um vetor e um elemento como entrada para uma fun\u00e7\u00e3o chamda de find , retorne a posi\u00e7\u00e3o do elemento encontrado; caso n\u00e3o seja encontrado retorne None (nulo). Python def find ( vetor , elemento ):","title":"Aula 1 (2019-04-03)"},{"location":"aula1/#estrutura-de-dados","text":"Em Ci\u00eancia da computa\u00e7\u00e3o, uma estrutura de dado \u00e9 um formato de organiza\u00e7\u00e3o, gerenciamento e armazenamento de dados que habilita acesso e modifica\u00e7\u00e3o eficiente.","title":"Estrutura de dados"},{"location":"aula1/#exemplo-e-revisao","text":"","title":"Exemplo e revis\u00e3o"},{"location":"aula1/#vetor-arranjo","text":"","title":"Vetor (Arranjo)"},{"location":"aula1/#formato","text":"Python # Em python o nome dessa estrutura de dado eh conhecida como lista # Mas para fins de exemplo criamos uma variavel com o nome vetor. # Indices do vetor comeca em 0. vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] print ( vetor [ 0 ]) 1 C /* Aqui alocamos um vetor de inteiros com 10 elementos, sendo eles todo * o intervalo [1, 10]. * Indicies comecam em 0. */ int vetor [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; printf ( \"%d\" , vetor [ 0 ]); 1","title":"Formato:"},{"location":"aula1/#gerenciamento","text":"Em um vetor podemos: adicionar, atualizar, excluir e ler elementos.","title":"Gerenciamento:"},{"location":"aula1/#adicionar","text":"Adi\u00e7\u00e3o modifica o vetor original, aumentando pelo menos um elemento novo. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . append ( 11 ) # Metodo (funcao) de orientacao a objeto. vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] # Apenas para mostrar como eh no \"paradigma estrutural\". def meu_append ( vetor , novo_elemento ): vetor . append ( novo_elemento ) # Funcao nao retorna nada, podemos chamar de \"procedimento\". vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] meu_append ( vetor , novo_elemento ) vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ]","title":"Adicionar"},{"location":"aula1/#atualizar","text":"Atualiza\u00e7\u00e3o precisa modificar algum elemento j\u00e1 existente do vetor original. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor [ 2 ] = 11 vetor [ 1 , 2 , 11 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]","title":"Atualizar"},{"location":"aula1/#remover","text":"Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . remove ( 5 ) # Qual algoritmo eh necessario ANTES de remover? vetor [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 , 10 ] # TODO: exercicio: fazer o seu proprio remover. def meu_remover ( vetor , elemento ): pass # Funcao nao retorna nada","title":"Remover"},{"location":"aula1/#ler","text":"Python # Leitura NAO pode modificar o nosso vetor original vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] a = vetor [ 2 ] a 2 # Leitura direta do vetor para impressao print ( vetor [ 2 ])","title":"Ler"},{"location":"aula1/#armazenamento","text":"Mem\u00f3ria RAM, registradores do processador (CPU), dispositivo de armazenamento secund\u00e1rio (HDDs, SSDs, etc).","title":"Armazenamento:"},{"location":"aula1/#memoria-ram","text":"Um vetor de caracteres armazenados em mem\u00f3ria RAM. # Assumindo que cada caracter tem um byte. vetor = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] Endere\u00e7o Dado 100000 '1' 100001 '2' 100002 '3' 100003 '4' 100004 '5' 100005 '6' 100006 '7' 100007 '8' 100008 '9' 100009 '10'","title":"Mem\u00f3ria RAM"},{"location":"aula1/#revisao","text":"","title":"Revis\u00e3o"},{"location":"aula1/#variaveis-simples","text":"Python a = 1 # Inteiro b = 2 c = True # Booleano d = 'uma string' # String e = 1.1 # Ponto flutuante (Float) print ( a ) 1 print ( b ) 2 print ( c ) True print ( d ) uma string print ( e ) 1.1","title":"Vari\u00e1veis simples"},{"location":"aula1/#operadores","text":"Python # Aritmeticos principais: + - * / % # Extra: ** (potencia) a = 2 b = 4 a + b 6 a ** 2 4 # Logicos principais: not and or # Comparacao: < > <= >= == != a = 2 b = 4 a > b False b > a True","title":"Operadores"},{"location":"aula1/#estruturas-de-repeticao","text":"FOR, WHILE, DO WHILE, REPEAT UNTIL.","title":"Estruturas de repeti\u00e7\u00e3o"},{"location":"aula1/#for","text":"Python for ELEMENTO in ITERADOR : CORPO DO FOR Um iterador \u00e9 um \"conjunto de elementos\", podendo ser vazio, ter apenas um elemento, ou mais do que um elemento. Se for vazio, o corpo (escopo) do for n\u00e3o \u00e9 executado. Caso contr\u00e1rio o corpo do for \u00e9 executado em todos elementos do iterador. Python range ( 10 ) # Funcao pronta (interna) do Python. range ( 0 , 10 ) # Transformar o \"range\" em uma \"list\" (vetor). # Para fins de aprendizado, vetor e lista (list) sao sinonimos. list ( range ( 10 )) [ 0 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 )) [ 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 , 2 )) [ 5 , 7 , 9 ] vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] tamanho = len ( vetor ) # Funcao pronta (interna) do Python. print ( tamanho ) 10 for i in range ( tamanho ): print ( 'i: %s ' , vetor [ i ]) # Alernativa mais elegante. for elemento in vetor : print ( 'Elemento: %s ' , elemento ) # Alernativa elegante enumerada. for i , elemento in enumerate ( vetor ): print ( 'Elemento %s : %s ' , ( i , elemento )) list ( enumerate ( vetor )) [( 0 , 1 ), ( 1 , 2 ), ( 2 , 3 ), ( 3 , 4 ), ( 4 , 5 ), ( 5 , 6 ), ( 6 , 7 ), ( 7 , 8 ), ( 8 , 9 )]","title":"FOR"},{"location":"aula1/#while","text":"Python while CONDICAO : CORPO DO WHILE Enquanto a condi\u00e7\u00e3o for verdadeira o while \u00e9 executado indefinidamente; caso contr\u00e1rio o while para sua execu\u00e7\u00e3o. Python condicao = True i = 0 while condicao : print ( i ) i += 1 if i > 10 : condicao = False","title":"WHILE"},{"location":"aula1/#exercicio-encontrar-posicao-de-um-elemento-em-um-vetor","text":"Dado um vetor e um elemento como entrada para uma fun\u00e7\u00e3o chamda de find , retorne a posi\u00e7\u00e3o do elemento encontrado; caso n\u00e3o seja encontrado retorne None (nulo). Python def find ( vetor , elemento ):","title":"Exerc\u00edcio: encontrar posi\u00e7\u00e3o de um elemento em um vetor"},{"location":"aula2/","text":"","title":"Aula 2 (2019-04-05)"}]}